library(Rcpp)
?NumericVector
??NumericVector
nv <- Rcpp::NumericVector(doubles)
Rcpp::NumericVector doubles
plot(double)
head(doubles)
plot(doubles)
filepath <- "~/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 46.pdz"#
test2 <- read.csv("/Users/lee/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/CSV/MUD 46.CSV", header=FALSE)
integers <- readBin(con=filepath, what= "int", n=3000, endian="little", signed=FALSE)#
doubles <- as.double(integers)
plot(doubles)
integers <- readBin(con=filepath, what= uint32_t, n=3000, endian="little", signed=FALSE)
integers <- readBin(con=filepath, what= "uint32_t", n=3000, endian="little", signed=FALSE)
doubles <- as.double(integers)
plot(integers)
head(integers)
integers
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
library(Rcpp)
sourceCpp(file="~/GitHub/CloudCal/Tests/test.cpp")
cppFunction(int double_me3(int x) {#
    // takes a numeric input and doubles it#
    return 2 * x;#
})
cppFunction('int add(int x, int y, int z) {#
  int sum = x + y + z;#
  return sum;#
}')
add(4, 3, 1)
cppFunction(#
#
int read_pdz(int pdz.file){#
    int main() {#
        unsigned char bytes[4];#
        int sum = 0;#
        FILE *fp=fopen("file.txt","rb");#
        while ( fread(bytes, 4, 1,fp) != 0) {#
            sum += bytes[0] | (bytes[1]<<8) | (bytes[2]<<16) | (bytes[3]<<24);#
        }#
        return 0;#
    }#
#
}#
)
cppFunction(#
#
    int main() {#
        unsigned char bytes[4];#
        int sum = 0;#
        FILE *fp=fopen("file.txt","rb");#
        while ( fread(bytes, 4, 1,fp) != 0) {#
            sum += bytes[0] | (bytes[1]<<8) | (bytes[2]<<16) | (bytes[3]<<24);#
        }#
        return 0;#
    }#
#
)
cppFunction(#
#
    'int main() {#
        unsigned char bytes[4];#
        int sum = 0;#
        FILE *fp=fopen("file.txt","rb");#
        while ( fread(bytes, 4, 1,fp) != 0) {#
            sum += bytes[0] | (bytes[1]<<8) | (bytes[2]<<16) | (bytes[3]<<24);#
        }#
        return 0;#
    }'#
#
)
main(filepath)
filepath
filepath <- "~/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 46.pdz"
main(filepath)
cppFunction(#
#
'int read_pdz(filepath) {#
unsigned char bytes[4];#
int sum = 0;#
FILE *fp=fopen(filepath,"rb");#
while ( fread(bytes, 4, 1,fp) != 0) {#
    sum += bytes[0] | (bytes[1]<<8) | (bytes[2]<<16) | (bytes[3]<<24);#
}#
return 0;#
}'#
#
)
'int read_pdz(int filepath) {#
unsigned char bytes[4];#
int sum = 0;#
FILE *fp=fopen(filepath,"rb");#
while ( fread(bytes, 4, 1,fp) != 0) {#
    sum += bytes[0] | (bytes[1]<<8) | (bytes[2]<<16) | (bytes[3]<<24);#
}#
return 0;#
}'#
#
)
cppFunction(#
#
'int read_pdz(int filepath) {#
unsigned char bytes[4];#
int sum = 0;#
FILE *fp=fopen(filepath,"rb");#
while ( fread(bytes, 4, 1,fp) != 0) {#
    sum += bytes[0] | (bytes[1]<<8) | (bytes[2]<<16) | (bytes[3]<<24);#
}#
return 0;#
}'#
#
)
cppFunction(#
#include <stdio.h>#
'int read_pdz(int filepath) {#
unsigned char bytes[4];#
int sum = 0;#
FILE *fp=fopen(filepath,"rb");#
while ( fread(bytes, 4, 1,fp) != 0) {#
    sum += bytes[0] | (bytes[1]<<8) | (bytes[2]<<16) | (bytes[3]<<24);#
}#
return 0;#
}'#
#
)
cppFunction(#
'/* fopen example */#
#include <stdio.h>#
int main ()#
{#
    FILE * pFile;#
    pFile = fopen ("myfile.txt","w");#
    if (pFile!=NULL)#
    {#
        fputs ("fopen example",pFile);#
        fclose (pFile);#
    }#
    return 0;#
}')
main(filepath)
cppFunction(#
'/* fopen example */#
using namespace Rcpp;#
#include <stdio.h>#
int main ()#
{#
    FILE * pFile;#
    pFile = fopen ("myfile.txt","w");#
    if (pFile!=NULL)#
    {#
        fputs ("fopen example",pFile);#
        fclose (pFile);#
    }#
    return 0;#
}')
cppFunction(#
#include <stdio.h>#
'int read_pdz(int filepath) {#
unsigned char bytes[4];#
int sum = 0;#
FILE *fp=fopen(filepath,"rb");#
while ( fread(bytes, 4, 1,fp) != 0) {#
    sum += bytes[0] | (bytes[1]<<8) | (bytes[2]<<16) | (bytes[3]<<24);#
}#
return 0;#
}'#
#
)
cppFunction(#
'#
typedef struct {#
    float    sngHVADC;            // Requested HV in kV#
    float    sngCurADC;            // Requested Current in µA#
    byte    bytVolt;            // Ignore – legacy support#
    byte    bytCurrent;            // Ignore – legacy support#
    byte    bytToggle;            // Scaler selected#
    byte    bytPulseLength;        // Ignore – legacy support#
    byte    bytPulsePeriod;        // Ignore – legacy support#
    byte    bytFilter;            // Ignore – legacy support#
    byte    bytExtActual;        // Ignore – legacy support#
    byte    bytTimes2;            // Ignore – legacy support#
} XRAY, *PXRAY;#
#
typedef struct {#
    short        bElement;        // layer element atomic number#
    short        sThickness;        // layer thickness#
} FILTERLAYER, *PFILTERLAYER;#
#
typedef struct {#
    int        iFilterNum;        // filter identifier in wheel#
    FILTERLAYER    flLayer[3];        // layer description structures#
} S1FILTER, *PS1FILTER;#
#
struct#
{#
    byte            FPGA_Ver;        // FPGA version (Ignore)#
    byte            FPGA_SubVer;    // FPGA subversion (Ignore)        unsigned short    iPacket_Len;    // Ignore                    unsigned long    iTDur;        // Total packet duration (mS)#
    unsigned long    iRaw_Cnts;        // Raw counts, final packet        unsigned long    iValid_Cnts;    // valid counts, final packet            unsigned long    iValid_CntsRng;    // Ignore                    unsigned long    iADur;        // packet active time (mS)#
    unsigned long    iADead;        // packet dead time (mS)        unsigned long    iAReset;        // packet reset time (mS)            unsigned long    iALive;        // packet live time (mS)            unsigned long    iService;        // Ignore                    unsigned short    iReset_Cnt;        // Ignore#
    unsigned short    iPacket_Cnt;    // packet number#
    byte            Unused[20];        // Ignore#
    float            fXRay_ActualHV;    // Actaul HV (not valid)#
    float            fXRay_ActualAC;    // Actual anode current (not valid)#
    byte            bValidActuals;    // Ignore#
    byte            XRay_ActualHVDAC; // Ignore#
    byte            XRay_ActualACDAC; // Ignore#
    byte            Unused2;        // Ignore#
    byte            Xilinx_Vars[46];  // Xilinx variables (Ignore)#
    short            Det_Temp;        // detector temp in C            unsigned short    Amb_Temp;        // ambient temp in F#
    byte            MCU_Ver;        // MCU version (Ignore)#
    byte            MCU_SubVer;          // MCU subversion (Ignore)            unsigned long    iRaw_Cnts_Acc;      // Assay Raw counts                unsigned long    iValid_Cnts_Acc;    // Assay Valid counts#
    unsigned long    iValid_CntsRng_Acc; // Ignore                    unsigned long    iReset_Cnt_Acc;      // Ignore#
    float            fTDur;          // Assay duration (seconds)#
    float            fADur;          // Assay active time (seconds)#
    float            fADead;          // Assay dead time (seconds)#
    float            fAReset;          // Assay reset time (seconds)#
    float            fALive;          // Assay live time (seconds)        unsigned long    lVacuum_Acc;      // Ignore#
    unsigned long    lPacket_Cnt;      // packets in assay#
    S1FILTER        xTubeFilter;      // beam filter structure#
    XRAY            XRay;              // x-ray settings structure#
} s1_cooked_head;#
#
struct#
{#
    float            fEVPerChannel;      // eV per channel#
    s1_cooked_head     stCookedHeader;     // described above#
    unsigned long    SpectrumData[SPECCHANNELS];  // spectrum data#
} SpecData;#
'#
)
sourceCpp("~/GitHub/CloudCal/Tests/PDZImport.cpp")
install.Rtools()
library(devtools)#
find_rtools()
install.Rtools()
sourceCpp("~/GitHub/CloudCal/Tests/PDZImport.cpp")
cppFunction(#
'#
typedef struct XRAY {#
    float    sngHVADC;            // Requested HV in kV#
    float    sngCurADC;            // Requested Current in µA#
    Rbyte    bytVolt;            // Ignore – legacy support#
    Rbyte    bytCurrent;            // Ignore – legacy support#
    Rbyte    bytToggle;            // Scaler selected#
    Rbyte    bytPulseLength;        // Ignore – legacy support#
    Rbyte    bytPulsePeriod;        // Ignore – legacy support#
    Rbyte    bytFilter;            // Ignore – legacy support#
    Rbyte    bytExtActual;        // Ignore – legacy support#
    Rbyte    bytTimes2;            // Ignore – legacy support#
} XRAY, *PXRAY;#
#
typedef struct FILTERLAYER {#
    short        bElement;        // layer element atomic number#
    short        sThickness;        // layer thickness#
} FILTERLAYER, *PFILTERLAYER;#
#
typedef struct S1FILTER {#
    int        iFilterNum;        // filter identifier in wheel#
    FILTERLAYER    flLayer[3];        // layer description structures#
} S1FILTER, *PS1FILTER;#
#
struct s1_cooked_head#
{#
    Rbyte            FPGA_Ver;        // FPGA version (Ignore)#
    Rbyte            FPGA_SubVer;    // FPGA subversion (Ignore)#
    unsigned short    iPacket_Len;    // Ignore#
    unsigned long    iTDur;        // Total packet duration (mS)#
    unsigned long    iRaw_Cnts;        // Raw counts, final packet#
    unsigned long    iValid_Cnts;    // valid counts, final packet#
    unsigned long    iValid_CntsRng;    // Ignore#
    unsigned long    iADur;        // packet active time (mS)#
    unsigned long    iADead;        // packet dead time (mS)#
    unsigned long    iAReset;        // packet reset time (mS)#
    unsigned long    iALive;        // packet live time (mS)#
    unsigned long    iService;        // Ignore#
    unsigned short    iReset_Cnt;        // Ignore#
    unsigned short    iPacket_Cnt;    // packet number#
    Rbyte            Unused[20];        // Ignore#
    float            fXRay_ActualHV;    // Actaul HV (not valid)#
    float            fXRay_ActualAC;    // Actual anode current (not valid)#
    Rbyte            bValidActuals;    // Ignore#
    Rbyte            XRay_ActualHVDAC; // Ignore#
    Rbyte            XRay_ActualACDAC; // Ignore#
    Rbyte            Unused2;        // Ignore#
    Rbyte            Xilinx_Vars[46];  // Xilinx variables (Ignore)#
    short            Det_Temp;        // detector temp in C#
    unsigned short    Amb_Temp;        // ambient temp in F#
    Rbyte            MCU_Ver;        // MCU version (Ignore)#
    Rbyte            MCU_SubVer;          // MCU subversion (Ignore)#
    unsigned long    iRaw_Cnts_Acc;      // Assay Raw counts#
    unsigned long    iValid_Cnts_Acc;    // Assay Valid counts#
    unsigned long    iValid_CntsRng_Acc; // Ignore#
    unsigned long    iReset_Cnt_Acc;      // Ignore#
    float            fTDur;          // Assay duration (seconds)#
    float            fADur;          // Assay active time (seconds)#
    float            fADead;          // Assay dead time (seconds)#
    float            fAReset;          // Assay reset time (seconds)#
    float            fALive;          // Assay live time (seconds)#
    unsigned long    lVacuum_Acc;      // Ignore#
    unsigned long    lPacket_Cnt;      // packets in assay#
    S1FILTER        xTubeFilter;      // beam filter structure#
    XRAY            XRay;              // x-ray settings structure#
} s1_cooked_head;#
#
struct SpecData#
{#
    float            fEVPerChannel;      // eV per channel#
    s1_cooked_head     stCookedHeader;     // described above#
    unsigned long    SpectrumData[SPECCHANNELS];  // spectrum data#
} SpecData;#
'#
)
"/Users/lee/GitHub/CloudCal/Tests/PDZImport.cpp"
sourceCpp("/Users/lee/GitHub/CloudCal/Tests/PDZImport.cpp")
?sourceCpp
sourceCpp("/Users/lee/GitHub/CloudCal/Tests/PDZImport.cpp")
sourceCpp("/Users/lee/GitHub/CloudCal/Tests/PDZImport.cpp", showOutput=TRUE)
library(Rcpp)
library(devtools)
cppFunction('int add(int x, int y, int z) {#
   int sum = x + y + z;#
   return sum;#
 }')
add(5, 6, 7)
add(6, 7)
cppFunction('int hateyou(int x, int y, int z) {#
   int sum = x + y + z;#
   return sum;#
 }')
hateyou(5, 6, 7)
cppFunction('#
/*#
 All these function are useful in Reading file. erase_delime function is used to erase delimiter#
 such space' ' ,new line ('\n'),tab ...#
 */#
#
#include <fstream>#
#include <sstream>#
#include <string>#
#include <algorithm>#
#include <cctype>#
#include <Rcpp.h>#
using namespace Rcpp;#
//[[Rcpp::export]]#
std::string read_txt(std::string path){#
    std::ifstream in(path.c_str());//connect with file into in(STDIN)#
    std::stringstream ss;#
    ss<<in.rdbuf();                // scan file or reading buffer#
    return ss.str();#
}#
//[[Rcpp::export]]#
std::string read_txts(std::string path){#
    std::ifstream in(path.c_str());#
    std::string contents;#
    in.seekg(0,std::ios::end); // scan all file from the first to the end#
    contents.resize(in.tellg());// adjust the size of the resulting string with the file size(tellg function)#
    in.seekg(0,std::ios::beg);  //return to the beginning#
    in.read(&contents[0],contents.size());// each value of the  in pointer will copied into contents#
    in.close();                          // colsing the in#
    return contents;#
}')
cppFunction('#
#
#include <fstream>#
#include <sstream>#
#include <string>#
#include <algorithm>#
#include <cctype>#
#include <Rcpp.h>#
using namespace Rcpp;#
//[[Rcpp::export]]#
std::string read_txt(std::string path){#
    std::ifstream in(path.c_str());//connect with file into in(STDIN)#
    std::stringstream ss;#
    ss<<in.rdbuf();                // scan file or reading buffer#
    return ss.str();#
}#
//[[Rcpp::export]]#
std::string read_txts(std::string path){#
    std::ifstream in(path.c_str());#
    std::string contents;#
    in.seekg(0,std::ios::end); // scan all file from the first to the end#
    contents.resize(in.tellg());// adjust the size of the resulting string with the file size(tellg function)#
    in.seekg(0,std::ios::beg);  //return to the beginning#
    in.read(&contents[0],contents.size());// each value of the  in pointer will copied into contents#
    in.close();                          // colsing the in#
    return contents;#
}')
cppFunction('#
#
#include <fstream>#
#include <sstream>#
#include <string>#
#include <algorithm>#
#include <cctype>#
#include <Rcpp.h>#
using namespace Rcpp;#
//[[Rcpp::export]]#
#
//[[Rcpp::export]]#
std::string read_txts(std::string path){#
    std::ifstream in(path.c_str());#
    std::string contents;#
    in.seekg(0,std::ios::end); // scan all file from the first to the end#
    contents.resize(in.tellg());// adjust the size of the resulting string with the file size(tellg function)#
    in.seekg(0,std::ios::beg);  //return to the beginning#
    in.read(&contents[0],contents.size());// each value of the  in pointer will copied into contents#
    in.close();                          // colsing the in#
    return contents;#
}')
sourceCpp("~/GitHub/CloudCal/Tests/PDZImport.cpp")
cppFunction('#
#include <stdint.h>#
#
int add(int x, int y, int z) {#
   int sum = x + y + z;#
   return sum;#
 }')
library(Rcpp)
cppFunction('#
#include <stdint.h>#
#
int add(int x, int y, int z) {#
   int sum = x + y + z;#
   return sum;#
 }')
install.packages("inline")
cppFunction('#
#include <fstream>#
#include <stdint.h>#
#
int main()#
{#
    std::ifstream is("inputfile.dat", std::ios::binary);#
    std::ofstream os("output.csv");#
    uint32_t i;#
    while(is.read((char *)&i, sizeof(i)))#
    os<<1.6*(i-0x7fffff)/0x7fffff<<";\n";#
    return 0;#
}')
cppFunction('#
#include <fstream>#
#
int main()#
{#
    std::ifstream is("inputfile.dat", std::ios::binary);#
    std::ofstream os("output.csv");#
    unsigned int i;#
    while(is.read((char *)&i, sizeof(i)))#
    os<<1.6*(i-0x7fffff)/0x7fffff<<";\n";#
    return 0;#
}')
cppFunction('#
#include <fstream>#
#
int main()#
{#
    std::ifstream is("inputfile.dat", std::ios::binary);#
    std::ofstream os("output.csv");#
    unsigned int i;#
#
    return 0;#
}')
filepath <- "~/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 46.pdz"
main(filepath)
cppFunction('#
#include <fstream>#
#include <stdint.h>#
#
int main()#
{#
    std::ifstream is("inputfile.dat", std::ios::binary);#
    std::ofstream os("output.csv");#
    uint32_t i;#
    return 0;#
}')
cppFunction('#
#include <fstream>#
#include <stdint.h>#
#
int main()#
{#
    std::ifstream is("inputfile.dat", std::ios::binary);#
    std::ofstream os("output.csv");#
    uint32_t;#
    return 0;#
}')
cppFunction('#
void bcdEncoder::readBinaryFile(string fileName)#
{#
    std::vector<unsigned int> myData;#
    int size;#
    fstream binaryIo;#
    binaryIo.open(fileName, ios::in | ios::binary | ios::trunc);#
    binaryIo.read(&size, sizeof(size)); // read the number of elements#
    myData.resize(size); // allocate memory for an array#
    binaryIo.read(myData.data(), size * sizeof(myData.value_type));#
    binaryIo.close();#
}#
')
cppFunction('#
void bcdEncoder::readBinaryFile(string fileName, int size)#
{#
    AllocateArray packedData(size);#
    unsigned int *packedArray = packedData.createIntArray();#
    ifstream binaryIo;#
    binaryIo.open(fileName, ios::binary);#
    if (binaryIo.is_open()) {#
        binaryIo.read((char*)packedArray, size * sizeof(packedArray[0]));#
        binaryIo.close();#
        decodeBCD(packedArray, size * 5, fileName);#
    }#
    else#
    cout << "Error reading bin file..." << endl;#
}#
')
cppFunction('#
static std::vector<char> ReadAllBytes(char const* filename)#
{#
    ifstream ifs(filename, ios::binary|ios::ate);#
    ifstream::pos_type pos = ifs.tellg();#
    std::vector<char>  result(pos);#
    ifs.seekg(0, ios::beg);#
    ifs.read(&result[0], pos);#
    return result;#
}#
')
cppFunction('#
#
#include <stdio.h>#
#include <iostream>#
#
static std::vector<char> ReadAllBytes(char const* filename)#
{#
    ifstream ifs(filename, ios::binary|ios::ate);#
    ifstream::pos_type pos = ifs.tellg();#
    std::vector<char>  result(pos);#
    ifs.seekg(0, ios::beg);#
    ifs.read(&result[0], pos);#
    return result;#
}#
')
cppFunction('#
#
#include <stdio.h>#
#include <iostream>#
#
static std::vector<char> ReadAllBytes(char const* filename)#
{#
    std::ifstream ifs(filename, ios::binary|ios::ate);#
    std::ifstream::pos_type pos = ifs.tellg();#
    std::vector<char>  result(pos);#
    ifs.seekg(0, ios::beg);#
    ifs.read(&result[0], pos);#
    return result;#
}#
')
cppFunction('#
#
#include <stdio.h>#
#include <iostream>#
#
static std::vector<char> ReadAllBytes(char const* filename)#
{#
    iostream::ifstream ifs(filename, ios::binary|ios::ate);#
    iostream::ifstream::pos_type pos = ifs.tellg();#
    iostream::vector<char>  result(pos);#
    ifs.seekg(0, ios::beg);#
    ifs.read(&result[0], pos);#
    return result;#
}#
')
sourceCpp(code='#
  #include <Rcpp.h>#
#
  // [[Rcpp::export]]#
  int fibonacci(const int x) {#
    if (x == 0) return(0);#
    if (x == 1) return(1);#
    return (fibonacci(x - 1)) + fibonacci(x - 2);#
  }'#
)
fibonacci(5)
fibonacci(6)
fibonacci(9)
fibonacci(c(1, 2, 3))
devtools::has_devel()
sumR <- function(x) {#
  total <- 0#
  for (i in seq_along(x)) {#
    total <- total + x[i]#
  }#
  total#
}
sumR(5)
sumR(c(1, 2, 3))
readBin()
readBin
library(Rcpp)
sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
boop <- c(1, 2, 3, 4)
test <- writeBinary(bam, boop)
test <- readBinary(fileName, size=3000)
plot(test)
test <- readBinary(random, size=3000)
tempfile()
filepath <- "/Users/lee/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 46.pdz"
sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
readBinary(filepath, n=2500)
readBinary(filepath, size=2500)
test <- readBinary(filepath, size=2500)
plot(test)
plot(test, type="line")
sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
test <- readBinary(filepath, size=2500)
plot(test, type="line")
sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
test <- readBinary(filepath, size=2500)
filepath <- "/Users/lee/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 46.pdz"
test <- readBinary(filepath, size=2500)
plot(test, type="line")
filepath <- "/Users/lee/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 46.pdz"
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
test <- readBinary(filepath, size=2500)
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
test <- readBinary(filepath, size=2500)
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
test <- readBinary(filepath, size=2500)
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
test <- readBinary(filepath, size=2500)
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
test <- readBinary(filepath, size=2500)
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
test <- readBinary(filepath, size=2500)
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
test <- readBinary(filepath, size=2500)
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
test <- readBinary(filepath, size=2500)
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
test <- readBinary(filepath, size=2500)
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
test <- readBinary(filepath, size=2500)
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
test <- readBinary(filepath, size=2500)
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
test <- readBinary(filepath, size=2500)
plot(test, type="line")
filepath <- "/Users/lee/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 46.pdz"#
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")#
test <- readBinary(filepath, size=2500)#
plot(test, type="line")
filepath <- "/Users/lee/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 46.pdz"#
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")#
test <- readBinary(filepath, size=4)#
plot(test, type="line")
filepath <- "/Users/lee/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 46.pdz"#
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")#
test <- readBinary(filepath, size=1000)#
plot(test, type="line")
1
filepath <- "/Users/lee/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 46.pdz"#
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")#
test <- readBinary(filepath, size=1000)#
plot(test, type="line")
filepath <- "/Users/lee/Desktop/ICRAF 5i 900F4352 Cal/SeqRuns/Soil Light_20170626220831SK5-4352/MAJ-Soil-01_Solids.pdz"#
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")#
test <- readBinary(filepath, size=1000)#
plot(test, type="line")
test
filepath <- "/Users/lee/Desktop/ICRAF 5i 900F4352 Cal/SeqRuns/Soil Light_20170626220831SK5-4352/MAJ-Soil-01_Solids.pdz"#
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")#
test <- readBinary(filepath, size=1000)#
plot(test, type="line")
filepath <- "~/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 01.pdz"
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")#
test <- readBinary(filepath, size=1000)#
plot(test, type="line")
test <- readBinary24(filepath, size=1000)#
plot(test, type="line")
test <- readPDZ24(filepath, size=1000)#
plot(test, type="line")
filepath24 <- "~/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 01.pdz"#
filepath25 <- "/Users/lee/Desktop/ICRAF 5i 900F4352 Cal/SeqRuns/Soil Light_20170626220831SK5-4352/MAJ-Soil-01_Solids.pdz"#
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")#
test <- readPDZ24(filepath24, size=1000)#
plot(test, type="line")
test <- readPDZ25(filepath25, size=1000)#
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")#
#
test <- readPDZ24(filepath24, size=1000)#
plot(test, type="line")
filepath24 <- "~/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 01.pdz"
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")#
#
test <- readPDZ24(filepath24, size=1000)#
plot(test, type="line")
test <- readPDZ24(filepath24, size=2500)#
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
test <- readPDZ25(filepath25, size=1000)#
plot(test, type="line")
test <- readPDZ24(filepath24, size=2500)#
plot(test, type="line")
filepath24 <- "/Users/lee/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 01.pdz"
test <- readPDZ24(filepath24, size=2500)#
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")#
#
test <- readPDZ24(filepath24, size=2500)#
plot(test, type="line")
test <- readPDZ24(filepath24, size=2000)#
plot(test, type="line")
filepath24 <- "/Users/lee/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 46.pdz"
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")#
#
test <- readPDZ24(filepath24, size=2000)#
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")#
#
test <- readPDZ24(filepath24, size=2048)#
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")#
#
test <- readPDZ24(filepath24, size=2047)#
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")#
#
test <- readPDZ24(filepath24, size=2040)#
plot(test, type="line")
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")#
#
test <- readPDZ24(filepath24, start=393, size=2000)#
plot(test, type="line")
test <- readPDZ25(filepath25, start=513, size=1000)#
plot(test, type="line")
shiny::runApp("~/GitHub/CloudCal")
filepath24 <- "/Users/lee/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 46.pdz"#
filepath25 <- "/Users/lee/Desktop/ICRAF 5i 900F4352 Cal/SeqRuns/Soil Light_20170626220831SK5-4352/MAJ-Soil-01_Solids.pdz"#
#
Rcpp::sourceCpp("~/GitHub/CloudCal/Tests/test.cpp")
Rcpp::sourceCpp("~/GitHub/CloudCal/pdz.cpp")
library(ggplot2)
test <- readPDZ24(filepath24, start=393, size=2000)#
index <- seq(1, lenght(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)#
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=6.4)
test <- readPDZ24(filepath24, start=393, size=2000)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)#
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=14.16)
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=14.16, lty=2)
test <- readPDZ24(filepath24, start=393, size=2000)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)#
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=14.16, lty=2) + geom_vline(xintercept=3.69, lty=2)
test <- readPDZ24(filepath24, start=373, size=2048)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)#
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=14.16, lty=2) + geom_vline(xintercept=3.69, lty=2)
test <- readPDZ24(filepath24, start=353, size=2048)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)#
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=14.16, lty=2) + geom_vline(xintercept=3.69, lty=2)
test <- readPDZ24(filepath24, start=357, size=2048)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)#
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=14.16, lty=2) + geom_vline(xintercept=3.69, lty=2)
test <- readPDZ25(filepath25, start=513, size=2048)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)#
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=6.4, lty=2) + geom_vline(xintercept=1.7, lty=2)
test <- readPDZ25(filepath25, start=503, size=2048)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)#
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=6.4, lty=2) + geom_vline(xintercept=1.7, lty=2)
test <- readPDZ25(filepath25, start=501, size=2048)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)#
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=6.4, lty=2) + geom_vline(xintercept=1.7, lty=2)
test <- readPDZ25(filepath25, start=481, size=2048)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)#
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=6.4, lty=2) + geom_vline(xintercept=1.7, lty=2)
test <- readPDZ25(filepath25, start=485, size=2048)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)#
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=6.4, lty=2) + geom_vline(xintercept=1.7, lty=2)
test <- readPDZ25(filepath25, start=481, size=2048)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)#
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=6.4, lty=2) + geom_vline(xintercept=1.7, lty=2)
shiny::runApp("~/GitHub/CloudCal")
filepath24 <- "/Users/lee/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 01.pdz"
test <- readPDZ24(filepath24, start=357, size=2048)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)#
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=14.16, lty=2) + geom_vline(xintercept=3.69, lty=2)
test <- readPDZ24(filepath24, start=357, size=2048)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)#
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=14.16, lty=2) + geom_vline(xintercept=3.69, lty=2) + scale_x_continuous(limits=c(2, 5))
test <- readPDZ24(filepath24, start=357, size=2020)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)
test <- readPDZ24(filepath24, start=357, size=2048)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)#
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=14.16, lty=2) + geom_vline(xintercept=3.69, lty=2) + scale_x_continuous(limits=c(2, 5))
shiny::runApp("~/GitHub/CloudCal")
filepath24 <- "/Users/lee/Desktop/Projects/all 5i work 3 27 2018/900F4430 UCSD/MUD 01.pdz"#
filepath25 <- "/Users/lee/Desktop/ICRAF 5i 900F4352 Cal/SeqRuns/Soil Light_20170626220831SK5-4352/MAJ-Soil-01_Solids.pdz"#
#
Rcpp::sourceCpp("~/GitHub/CloudCal/pdz.cpp")
test <- readPDZ24(filepath24, start=357, size=2020)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)
test.frame[21,]$Energy
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=14.16, lty=2) + geom_vline(xintercept=3.69, lty=2) + geom_vline(xintercept=0.42, lty=2)
library(ggplot2)
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=14.16, lty=2) + geom_vline(xintercept=3.69, lty=2) + geom_vline(xintercept=0.42, lty=2)
test <- readPDZ25(filepath25, start=481, size=2048)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)
test <- readPDZ25(filepath25, start=481, size=2048)#
index <- seq(1, length(test), 1)#
test.frame <- data.frame(Energy=index*.02, CPS=test)#
ggplot(test.frame, aes(Energy, CPS)) + geom_line() + theme_light() + geom_vline(xintercept=6.4, lty=2) + geom_vline(xintercept=1.7, lty=2)  + geom_vline(xintercept=0.42, lty=2)
shiny::runApp("~/GitHub/obsidianSource")
library(tools)
package_native_routine_registration_skeleton("~/GitHub/rPDZ/rpdz.cpp")
setwd("~/GitHub/rPDZ/rpdz.cpp")
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
compileAttributes(verbose=TRUE)
Rcpp::compileAttributes(verbose=TRUE)
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
library(rdz.cpp)
library(rpdz.cpp)
check.packages("rpdz.cpp")
check.packages <- function(pkg){#
    new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]#
    if (length(new.pkg)) #
        install.packages(new.pkg, dependencies = TRUE)#
    sapply(pkg, require, character.only = TRUE)#
}
check.packages("rpdz.cpp")
devtools::install_github("leedrake5/rPDZ")
install_github("wrengels/HWxtest", subdir="rpdz.cpp")
devtools::install_github("wrengels/HWxtest", subdir="rpdz.cpp")
devtools::install_github("leedrake5/rPDZ", subdir="rpdz.cpp")
"rpdz.cpp" %in% installed.packages()[,"Package"]
"rpdx.cpp" %in% installed.packages()[,"Package"]
"rpdz.cpp" %in% installed.packages()[,"Package"]==FALSE
"rpdz.cpp" %in% installed.packages()[,"Package"]==TRUE
library(rpdz.cpp)
devtools::install_github("leedrake5/rPDZ", subdir="rpdz.cpp_1.0.tar.gz")
install.packages('rpdz.cpp", lib="https://github.com/leedrake5/rPDZ/blob/master/rpdz.cpp_1.0.tar.gz')
install.packages('rpdz.cpp", lib="https://github.com/leedrake5/rPDZ/blob/master/')
install.packages('rpdz.cpp", CRAN="https://github.com/leedrake5/rPDZ/blob/master/', )
install.packages('rpdz.cpp", CRAN="https://github.com/leedrake5/rPDZ/blob/master/rpdz.cpp_1.0.tar.gz', )
install.packages('rpdz.cpp", CRAN="https://github.com/leedrake5/rPDZ/blob/master/rpdz.cpp_1.0.tar.gz' )
install.packages('rpdz.cpp", CRAN="https://github.com/leedrake5/rPDZ/blob/master/rpdz.cpp_1.0.tar.gz" )
install.packages("rpdz.cpp", CRAN="https://github.com/leedrake5/rPDZ/blob/master/rpdz.cpp_1.0.tar.gz" )
install.packages("rpdz.cpp", CRAN="https://github.com/leedrake5/rPDZ/blob/master/rpdz.cpp_1.0.tar.gz", method=download.file)
install.packages("https://github.com/leedrake5/rPDZ/blob/master/rpdz.cpp_1.0.tar.gz")
install.packages("https://github.com/leedrake5/rPDZ/raw/master/rpdz.cpp_1.0.tar.gz")
find_rtools(T)
devtools::find_rtools(T)
install.packages("~/GitHub/rPDZ/rpdz.cpp_1.0.tar.gz")
